/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        b_caps_word_lock: b_caps_word_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "B_CAPS_WORD_LOCK";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };
    };

    combos {
        compatible = "zmk,combos";

        c_del_word {
            bindings = <&del_word>;
            key-positions = <41 42>;
        };

        c_capsword {
            bindings = <&caps_word>;
            key-positions = <55 50>;
        };

        c_underscore {
            bindings = <&mt UNDER MINUS>;
            key-positions = <55 56>;
        };

        c_copy {
            bindings = <&kp LC(C)>;
            key-positions = <50 49>;
        };

        c_paste {
            bindings = <&kp LC(V)>;
            key-positions = <50 51>;
        };

        c_cut {
            bindings = <&kp LC(X)>;
            key-positions = <48 49>;
        };

        c_alt_tab {
            bindings = <&c_alt_tab_mode>;
            key-positions = <17 18>;
            require-prior-idle-ms = <500>;
        };
    };

    macros {
        del_word: del_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(BACKSPACE)>;
            label = "DEL_WORD";
        };

        del_fword: del_fword {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DELETE)>;
            label = "DEL_FWORD";
        };

        clear_mods: clear_mods {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LWIN &kp RWIN &kp LALT &kp RALT>;

            label = "CLEAR_MODS";
        };

        ctrl_alt_del: ctrl_alt_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(DEL))>;
            label = "CTRL_ALT_DEL";
        };

        c_alt_tab_mode: c_alt_tab_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LEFT_ALT>;

            label = "C_ALT_TAB_MODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL     &kp N1               &kp N2             &kp N3              &kp N4            &kp N5   &tog 1                                                    &mo 3          &kp N6  &kp N7            &kp N8              &kp N9          &kp N0                  &kp MINUS
&kp TAB       &kp Q                &kp W              &kp E               &kp R             &kp T    &mo 2                                                     &none          &kp Y   &kp U             &kp I               &kp O           &kp P                   &kp BSLH
&lt 2 ESCAPE  &hm LEFT_WIN A       &hm LEFT_ALT S     &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &lt 2 G  &mo 4      &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none          &kp H   &hm LEFT_SHIFT J  &hm LEFT_CONTROL K  &hm LEFT_ALT L  &hm LEFT_WIN SEMICOLON  &kp SQT
&kp LSHFT     &kp Z                &kp X              &kp C               &kp V             &kp B                          &kp HOME      &kp PG_UP                            &kp N   &kp M             &kp COMMA           &kp DOT         &kp FSLH                &kp RSHFT
&mo 2         &hm LC(GRAVE) GRAVE  &b_caps_word_lock  &kp LEFT            &kp RIGHT                  &kp SPACE  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp BACKSPACE          &kp DOWN          &kp UP              &kp LBKT        &kp RBKT                &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2    &kp F3        &kp F4     &kp F5          &kp F6  &tog 1                                          &mo 3      &kp F7    &kp F8         &kp F9     &kp F10    &kp F11  &kp F12
&trans  &trans    &trans        &trans     &trans          &trans  &none                                           &none      &trans    &kp END        &kp HOME   &trans     &trans   &trans
&trans  &kp LWIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans  &none   &trans  &trans      &trans  &trans      &none      &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &trans   &trans
&trans  &trans    &trans        &trans     &trans          &trans                  &trans      &trans                         &trans    &kp PAGE_DOWN  &kp PG_UP  &trans     &trans   &trans
&trans  &trans    &trans        &trans     &trans                  &trans  &trans  &trans      &trans  &del_fword  &del_word            &trans         &trans     &trans     &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none          &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &ctrl_alt_del  &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &clear_mods    &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none          &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_symbols {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LS(LBRC)  &kp LS(RBRC)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &kp LBKT      &kp RBKT      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &kp LBKT      &kp RBKT      &trans  &trans  &trans
            >;
        };
    };
};
